/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.cis240finalproject;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
/**
 *
 * @author Jacks
 */
public class SpaceApp extends javax.swing.JFrame {

    /**
     * Creates new form SpaceApp
     */
    public SpaceApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        MercuryBTN = new javax.swing.JRadioButton();
        VenusBTN = new javax.swing.JRadioButton();
        EarthBTN = new javax.swing.JRadioButton();
        MarsBTN = new javax.swing.JRadioButton();
        JupiterBTN = new javax.swing.JRadioButton();
        UranusBTN = new javax.swing.JRadioButton();
        SaturnBTN = new javax.swing.JRadioButton();
        NeptuneBTN = new javax.swing.JRadioButton();
        PlutoBTN = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SateliteBOX = new javax.swing.JList<>();
        CalculateBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputTXTBOX = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxDestinationOptions = new javax.swing.JComboBox<>();
        ComboBoxTripOptions = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        ChkBoxLEO = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MercuryBTN.setText("Mercury");
        MercuryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MercuryBTNActionPerformed(evt);
            }
        });

        VenusBTN.setText("Venus");
        VenusBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenusBTNActionPerformed(evt);
            }
        });

        EarthBTN.setText("Earth");
        EarthBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EarthBTNActionPerformed(evt);
            }
        });

        MarsBTN.setText("Mars");
        MarsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarsBTNActionPerformed(evt);
            }
        });

        JupiterBTN.setText("Jupiter");
        JupiterBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JupiterBTNActionPerformed(evt);
            }
        });

        UranusBTN.setText("Uranus");
        UranusBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UranusBTNActionPerformed(evt);
            }
        });

        SaturnBTN.setText("Saturn");
        SaturnBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaturnBTNActionPerformed(evt);
            }
        });

        NeptuneBTN.setText("Neptune");
        NeptuneBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NeptuneBTNActionPerformed(evt);
            }
        });

        PlutoBTN.setText("Pluto");
        PlutoBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlutoBTNActionPerformed(evt);
            }
        });

        SateliteBOX.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(SateliteBOX);

        CalculateBTN.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 22)); // NOI18N
        CalculateBTN.setText("Calculate!");
        CalculateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateBTNActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Satelites");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Destination Planets");

        OutputTXTBOX.setColumns(20);
        OutputTXTBOX.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        OutputTXTBOX.setRows(5);
        OutputTXTBOX.setText("...");
        OutputTXTBOX.setWrapStyleWord(true);
        jScrollPane2.setViewportView(OutputTXTBOX);

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Modifiers");

        ComboBoxDestinationOptions.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboBoxDestinationOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Destination high orbit", "Destination low orbit", "Destination surface landing" }));

        ComboBoxTripOptions.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboBoxTripOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "One way trip", "Return trip", " ", " " }));
        ComboBoxTripOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxTripOptionsActionPerformed(evt);
            }
        });

        jLabel5.setText("Please select what type of trip your spacecraft will be undertaking.");

        ChkBoxLEO.setText("Spacecraft begins journey from low earth orbit.");
        ChkBoxLEO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkBoxLEOActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel6.setText("*Disclaimer this is a theoretical senario* calculations for the estimated cost assume a payload of 1000kg using the efficency of most current cost effective launch system technology (Falcon Heavy)");

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setToolTipText("");
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("If your destination \nis not a satellite \nthen do not select.");
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MarsBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JupiterBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UranusBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SaturnBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NeptuneBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlutoBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VenusBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EarthBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MercuryBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(173, 173, 173)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(152, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ComboBoxTripOptions, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CalculateBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ComboBoxDestinationOptions, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ChkBoxLEO, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(186, 186, 186))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(MercuryBTN)
                                .addGap(18, 18, 18)
                                .addComponent(VenusBTN)
                                .addGap(18, 18, 18)
                                .addComponent(EarthBTN)
                                .addGap(18, 18, 18)
                                .addComponent(MarsBTN)
                                .addGap(18, 18, 18)
                                .addComponent(JupiterBTN)
                                .addGap(23, 23, 23)
                                .addComponent(SaturnBTN)
                                .addGap(18, 18, 18)
                                .addComponent(UranusBTN)
                                .addGap(18, 18, 18)
                                .addComponent(NeptuneBTN)
                                .addGap(18, 18, 18)
                                .addComponent(PlutoBTN))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ChkBoxLEO)
                                        .addGap(18, 18, 18)
                                        .addComponent(ComboBoxTripOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ComboBoxDestinationOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(CalculateBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(11, 11, 11)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(14, 14, 14)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MercuryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MercuryBTNActionPerformed
      
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false);
      MercuryFiller();
    }//GEN-LAST:event_MercuryBTNActionPerformed

    private void ChkBoxLEOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkBoxLEOActionPerformed
      
    }//GEN-LAST:event_ChkBoxLEOActionPerformed

    private void VenusBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenusBTNActionPerformed
      MercuryBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false);
      VenusFiller();
           
    }//GEN-LAST:event_VenusBTNActionPerformed

    private void EarthBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EarthBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false);
      EarthFiller();
    }//GEN-LAST:event_EarthBTNActionPerformed

    private void MarsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarsBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false); 
      MarsFiller();
    }//GEN-LAST:event_MarsBTNActionPerformed

    private void JupiterBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JupiterBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false);
      JupiterFiller();
    }//GEN-LAST:event_JupiterBTNActionPerformed

    private void SaturnBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaturnBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false);
      SaturnFiller();
    }//GEN-LAST:event_SaturnBTNActionPerformed

    private void UranusBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UranusBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      NeptuneBTN.setSelected(false);
      PlutoBTN.setSelected(false); 
      UranusFiller();
    }//GEN-LAST:event_UranusBTNActionPerformed

    private void NeptuneBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NeptuneBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      PlutoBTN.setSelected(false);  
      NeptuneFiller();
    }//GEN-LAST:event_NeptuneBTNActionPerformed

    private void PlutoBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlutoBTNActionPerformed
      MercuryBTN.setSelected(false);
      VenusBTN.setSelected(false);
      EarthBTN.setSelected(false);
      MarsBTN.setSelected(false);
      JupiterBTN.setSelected(false);
      SaturnBTN.setSelected(false);
      UranusBTN.setSelected(false);
      NeptuneBTN.setSelected(false);  
      PlutoFiller();
    }//GEN-LAST:event_PlutoBTNActionPerformed

    private void ComboBoxTripOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxTripOptionsActionPerformed
    
    }//GEN-LAST:event_ComboBoxTripOptionsActionPerformed

    private void CalculateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateBTNActionPerformed
        OutputTXTBOX.setText("");
        Planet Plnt = PlanetReturn();
        String Time;
        
       
        int DestinationType = Destination();
        int Trip = TripType();
        boolean SatDest = SatDestination();
        boolean LEObool = LEO();
        boolean landstopper = false;
        double MoneyCost;
        double DeltaVCost;
        MoneyCost = 0;
        DeltaVCost = 0;        
        
        
        
        
        
        
        
        if (SatDest == true){
            int SatSelect = SatBOXRtrn();
            Sattelites Satl = SatelittesRtrn(Plnt, SatSelect);
            Time = Satl.getTravelTime();
            switch (DestinationType) {
            case 0:
                MoneyCost = Satl.CostOfJourneyHighOrbit();
                DeltaVCost = Satl.getDeltaVCapture();
                break;
            case 1:
                MoneyCost = Satl.CostOfJourneyLowOrbit();
                DeltaVCost = Satl.getDeltaVLowOrbit();
                break;
            case 2:
                MoneyCost = Satl.CostOfJourneyLanding();
                DeltaVCost = Satl.getDeltaVLanding();
                break;
            default:
                break;}}
        else  {
            Time = Plnt.getTraveltime();
        switch (DestinationType) {
            case 0:
                MoneyCost = Plnt.CostOfJourneyHighOrbit();
                DeltaVCost = Plnt.getDeltaVCapture();
                break;
            case 1:
                MoneyCost = Plnt.CostOfJourneyLowOrbit();
                DeltaVCost = Plnt.getDeltaVLowOrbit();
                break;
            case 2:
                if (Plnt.isIsGasGiant() == true){
                 landstopper = true;
                } else{
                MoneyCost = Plnt.CostOfJourneyLanding();
                DeltaVCost = Plnt.getDeltaVLanding();
                break;}
            default:
                break; }
        } 
        
        
        switch (Trip) {
            case 0:
               
                break;
            case 1:
                Time = TwoWayTravelTime(Time);
                MoneyCost = ReturnTripCost(MoneyCost);
                DeltaVCost = ReturnTripDeltaV(DeltaVCost);
                break;
            default:
                break;
        }
      if (LEObool == true){
          DeltaVCost = DeltaVCost - 9;
          MoneyCost = MoneyCost - 900000;
      }
      
   String FinalCost = CostFormatter(MoneyCost);
   
         if (Plnt.getName().equals("Earth") && SatDest == false ) {
             OutputTXTBOX.append("Earth is your start location. " + "\n" + "Please select a satellite or another planet.");
         }
         else
         if (landstopper == true){ OutputTXTBOX.append("You may not attempt a landing on a gas giant planet!");}
         else{
       OutputTXTBOX.append("The cost of your voyage is " + "$" +  FinalCost + " of rocket fuel, " + "\n" + DeltaVCost + " Km/s of Delta V, " + "\n" + "and will take aproximantely  "  + Time + " to complete");
         }
       //"The cost of your voyage is " + "$" +  FormatedCost + " of rocket fuel, " + "\n" + DeltaVCost + " Km/s of Delta V, " + "\n" + "and will take aproximantely  "  + Time + " to complete"
       
       
    }//GEN-LAST:event_CalculateBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    
    //construct planets and moons
        ArrayList<Sattelites> MoonsofMercury = new ArrayList<>();
        Planet Mercury = new Planet ("Mercury", "3.5 months", 20.18, 21.4, 24.46,false, MoonsofMercury);
        
        ArrayList<Sattelites> MoonsofVenus = new ArrayList<>();
        Planet Venus = new Planet ("Venus", "4.8 months", 12.85, 15.79, 42.79, false,  MoonsofVenus);
        
        ArrayList<Sattelites> MoonsofEarth = new ArrayList<>();
        Planet Earth = new Planet ("Earth", "This is the start point", 0, 0, 0, false,  MoonsofEarth);
        
        ArrayList<Sattelites> MoonsofMars = new ArrayList<>();
        Planet Mars = new Planet ("Mars", "8.5 months", 13.61, 15.05, 18.65, false, MoonsofMars);
        
        ArrayList<Sattelites> MoonsofJupiter = new ArrayList<>();
        Planet Jupiter = new Planet ("Jupiter", "2.7 years", 15.57, 32.78, 65.78, true,  MoonsofJupiter);
        
        ArrayList<Sattelites> MoonsofSaturn = new ArrayList<>();
        Planet Saturn = new Planet ("Saturn", "6.0 years", 16.71, 26.93, 45.93, true, MoonsofSaturn);
        
        ArrayList<Sattelites> MoonsofUranus = new ArrayList<>();
        Planet Uranus = new Planet ("Uranus", "16.0 years", 17.49, 23.62, 38.62, true, MoonsofUranus);
        
        ArrayList<Sattelites> MoonsofNeptune = new ArrayList<>();
        Planet Neptune = new Planet ("Neptune", "30.6 years", 17.6, 24.35, 40.35,true,  MoonsofNeptune);
        
        ArrayList<Sattelites> MoonsofPluto = new ArrayList<>();
        Planet Pluto = new Planet ("Pluto", "45.5 years", 20.06, 20.41, 21.3, false, MoonsofPluto);
        
        //Earth
        Sattelites ISS = new Sattelites (Earth, "International Space Station","20 minutes", 9, 9, 9 );
        Sattelites Moon = new Sattelites (Earth, "Moon","2 days", 12.26, 12.94, 14.66 );
        MoonsofEarth.add(ISS);
        MoonsofEarth.add(Moon);
        
        //Mars
        Sattelites Phobos = new Sattelites (Mars, "Phobos","8.5 months", 14.89, 14.893, 14.889 );
        Sattelites Demios = new Sattelites (Mars, "Demios","8.5 months", 14.6, 14.602, 14.606 );
        MoonsofMars.add(Phobos);
        MoonsofMars.add(Demios);
        
        //Jupiter
        Sattelites Europa = new Sattelites (Jupiter, "Europa","2.7 years", 24.47, 25.05, 26.49 );
        Sattelites Io = new Sattelites (Jupiter, "Io","2.7 years", 25.9, 26.63, 28.41 );       
        Sattelites Ganymede = new Sattelites (Jupiter, "Ganymede","2.7 years", 22.28, 23.07, 25.02 );       
        Sattelites Callisto = new Sattelites (Jupiter, "Callisto","2.7 years", 20.72, 21.42, 23.17 );
        MoonsofJupiter.add(Europa);
        MoonsofJupiter.add(Io);
        MoonsofJupiter.add(Ganymede);
        MoonsofJupiter.add(Callisto);
        
        //Saturn
        Sattelites Titan = new Sattelites (Saturn, "Titan","6.0 years", 19.77, 20.43, 28.03 );       
        Sattelites Enceladus = new Sattelites (Saturn, "Enceladus","6.0 years", 24.81, 24.88, 25.04 );       
        Sattelites Rhea = new Sattelites (Saturn, "Rhea","6.0 years", 22.62, 22.8, 23.25 );        
        Sattelites Dione = new Sattelites (Saturn, "Dione","6.0 years", 23.51, 23.65, 24.1 );       
        Sattelites Tethys = new Sattelites (Saturn, "Tethys","6.0 years", 24.19, 24.3, 24.57);
        MoonsofSaturn.add(Titan);
        MoonsofSaturn.add(Enceladus);
        MoonsofSaturn.add(Rhea);
        MoonsofSaturn.add(Dione);
        MoonsofSaturn.add(Tethys);
        
        //Uranus
        Sattelites Titania = new Sattelites (Uranus, "Titania","16.0 years", 19.88, 20.1, 20.66);        
        Sattelites Miranda = new Sattelites (Uranus, "Miranda","16.0 years", 21.97, 22.02, 22.15);       
        Sattelites Umbriel = new Sattelites (Uranus, "Umbriel","16.0 years", 20.7, 20.85, 21.22);       
        Sattelites Ariel = new Sattelites (Uranus, "Ariel","16.0 years", 21.12, 21.28, 21.67);  
        MoonsofUranus.add(Titania);
        MoonsofUranus.add(Miranda);
        MoonsofUranus.add(Umbriel);
        MoonsofUranus.add(Ariel);
        
        //Neptune
        Sattelites Triton = new Sattelites (Neptune, "Triton","30.6 years", 20.1, 20.51, 21.56);
        MoonsofNeptune.add(Triton);
        
        //Pluto
        Sattelites Charon = new Sattelites (Pluto, "Charon","45.5 years", 20.12, 20.28, 20.7);
        MoonsofPluto.add(Charon); 
         
          
      
   
      
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpaceApp().setVisible(true);
            }
        });
    }
    //Trip methds
        public double ReturnTripDeltaV(double DeltaV) {
            return DeltaV * 2;
        }
        
         public double ReturnTripCost(double Cost) {
            return Cost * 2;
        }
         
        public int TripType() {
            int TripType;
            TripType = ComboBoxTripOptions.getSelectedIndex();
            return TripType;
        }
        
        public int Destination(){
            int Destination;
            Destination = ComboBoxDestinationOptions.getSelectedIndex();
            return Destination;
        }
        
        public boolean LEO(){   
        boolean LEO;
            if (ChkBoxLEO.isSelected()){
                LEO = true;} 
            else {
                LEO = false;}
            return LEO;
        }
    //Planet Getters    
        public Planet MercuryGet(){
             ArrayList<Sattelites> MoonsofMercury = new ArrayList<>();
             Planet Mercury = new Planet ("Mercury", "3.5 months", 20.18, 21.4, 24.46, false, MoonsofMercury);
             return Mercury;
        }
               
        public Planet VenusGet(){
            ArrayList<Sattelites> MoonsofVenus = new ArrayList<>();
        Planet Venus = new Planet ("Venus", "4.8 months", 12.85, 15.79, 42.79, false, MoonsofVenus);
        return Venus;
        }
        
        public Planet EarthGet(){
            ArrayList<Sattelites> MoonsofEarth = new ArrayList<>();
        Planet Earth = new Planet ("Earth", "This is the start point", 0, 0, 0, false, MoonsofEarth);
        Sattelites ISS = new Sattelites (Earth, "International Space Station","20 minutes", 9, 9, 9 );
        Sattelites Moon = new Sattelites (Earth, "Moon","2 days", 12.26, 12.94, 14.66 );
        MoonsofEarth.add(ISS);
        MoonsofEarth.add(Moon);
        
        return Earth;
        }
        
        public Planet MarsGet(){
           ArrayList<Sattelites> MoonsofMars = new ArrayList<>();
        Planet Mars = new Planet ("Mars", "8.5 months", 13.61, 15.05, 18.65, false, MoonsofMars);
         Sattelites Phobos = new Sattelites (Mars, "Phobos","8.5 months", 14.89, 14.893, 14.889 );
        Sattelites Demios = new Sattelites (Mars, "Demios","8.5 months", 14.6, 14.602, 14.606 );
        MoonsofMars.add(Phobos);
        MoonsofMars.add(Demios);
        return Mars;
        }
        
        public Planet JupiterGet(){
          ArrayList<Sattelites> MoonsofJupiter = new ArrayList<>();
        Planet Jupiter = new Planet ("Jupiter", "2.7 years", 15.57, 32.78, 65.78, true, MoonsofJupiter);
        Sattelites Europa = new Sattelites (Jupiter, "Europa","2.7 years", 24.47, 25.05, 26.49 );
        Sattelites Io = new Sattelites (Jupiter, "Io","2.7 years", 25.9, 26.63, 28.41 );       
        Sattelites Ganymede = new Sattelites (Jupiter, "Ganymede","2.7 years", 22.28, 23.07, 25.02 );       
        Sattelites Callisto = new Sattelites (Jupiter, "Callisto","2.7 years", 20.72, 21.42, 23.17 );
        MoonsofJupiter.add(Europa);
        MoonsofJupiter.add(Io);
        MoonsofJupiter.add(Ganymede);
        MoonsofJupiter.add(Callisto);
        return Jupiter;
        }
        
        public Planet SaturnGet (){
          ArrayList<Sattelites> MoonsofSaturn = new ArrayList<>();
        Planet Saturn = new Planet ("Saturn", "6.0 years", 16.71, 26.93, 45.93, true, MoonsofSaturn);
        Sattelites Titan = new Sattelites (Saturn, "Titan","6.0 years", 19.77, 20.43, 28.03 );       
        Sattelites Enceladus = new Sattelites (Saturn, "Enceladus","6.0 years", 24.81, 24.88, 25.04 );       
        Sattelites Rhea = new Sattelites (Saturn, "Rhea","6.0 years", 22.62, 22.8, 23.25 );        
        Sattelites Dione = new Sattelites (Saturn, "Dione","6.0 years", 23.51, 23.65, 24.1 );       
        Sattelites Tethys = new Sattelites (Saturn, "Tethys","6.0 years", 24.19, 24.3, 24.57);
        MoonsofSaturn.add(Titan);
        MoonsofSaturn.add(Enceladus);
        MoonsofSaturn.add(Rhea);
        MoonsofSaturn.add(Dione);
        MoonsofSaturn.add(Tethys);
        return Saturn;
        }

        public Planet UranusGet (){
          ArrayList<Sattelites> MoonsofUranus = new ArrayList<>();
        Planet Uranus = new Planet ("Uranus", "16.0 years", 17.49, 23.62, 38.62, true, MoonsofUranus);
        Sattelites Titania = new Sattelites (Uranus, "Titania","16.0 years", 19.88, 20.1, 20.66);        
        Sattelites Miranda = new Sattelites (Uranus, "Miranda","16.0 years", 21.97, 22.02, 22.15);       
        Sattelites Umbriel = new Sattelites (Uranus, "Umbriel","16.0 years", 20.7, 20.85, 21.22);       
        Sattelites Ariel = new Sattelites (Uranus, "Ariel","16.0 years", 21.12, 21.28, 21.67);  
        MoonsofUranus.add(Titania);
        MoonsofUranus.add(Miranda);
        MoonsofUranus.add(Umbriel);
        MoonsofUranus.add(Ariel);
        return Uranus;
        }
        
        public Planet NeptuneGet (){
          ArrayList<Sattelites> MoonsofNeptune = new ArrayList<>();
        Planet Neptune = new Planet ("Neptune", "30.6 years", 17.6, 24.35, 40.35, true, MoonsofNeptune);
         Sattelites Triton = new Sattelites (Neptune, "Triton","30.6 years", 20.1, 20.51, 21.56);
        MoonsofNeptune.add(Triton);
        return Neptune;
        }
        
        public Planet PlutoGet (){
           ArrayList<Sattelites> MoonsofPluto = new ArrayList<>();
        Planet Pluto = new Planet ("Pluto", "45.5 years", 20.06, 20.41, 21.3, false, MoonsofPluto);
        Sattelites Charon = new Sattelites (Pluto, "Charon","45.5 years", 20.12, 20.28, 20.7);
        MoonsofPluto.add(Charon); 
        return Pluto;
        }
         
         
        
        public Planet PlanetReturn () {
            ArrayList<Sattelites> Blanklist = new ArrayList<>();
            Planet Planetreturn = new Planet ("Name", "TravelTime", 0, 0, 0, false, Blanklist); 
            if (MercuryBTN.isSelected()){
            Planetreturn = MercuryGet();}
            else if (VenusBTN.isSelected()){
            Planetreturn = VenusGet();}
            else if (EarthBTN.isSelected()){
            Planetreturn = EarthGet();}
            else if (MarsBTN.isSelected()){
            Planetreturn = MarsGet();}
            else if (JupiterBTN.isSelected()){
            Planetreturn = JupiterGet();}
            else if (SaturnBTN.isSelected()){
            Planetreturn = SaturnGet();}
            else if (UranusBTN.isSelected()){
            Planetreturn = UranusGet();}
            else if (NeptuneBTN.isSelected()){
            Planetreturn = NeptuneGet();}
            else if ( PlutoBTN.isSelected()){
            Planetreturn = PlutoGet();}
            
            return Planetreturn;

     
        }
        
        
        public ArrayList MoonNames(Planet inputplnt){
            
             
             Sattelites SatInput = new Sattelites(inputplnt, "Name", "NA", 0, 0, 0 );
             ArrayList<Sattelites> MoonList = inputplnt.getSattelites();
             ArrayList<String> NameList = new ArrayList<>();
             
               for (int index = 0; index < MoonList.size(); index++){
               SatInput = MoonList.get(index);
               NameList.add(index,SatInput.getName() );
        }
             return NameList;
        }
        
        //Satellite box fillers
       public void MercuryFiller() {
         Planet Mercury = MercuryGet();
         ArrayList<String> MoonList = MoonNames(Mercury);
        
         if (MercuryBTN.isSelected()){
            SateliteBOX.clearSelection();
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
                
       public void VenusFiller() {
         Planet Venus = VenusGet();
         ArrayList<String> MoonList = MoonNames(Venus);
        
         if (VenusBTN.isSelected()){
            SateliteBOX.clearSelection();
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
       
       public void EarthFiller() {
            Planet Earth = EarthGet();
         ArrayList<String> MoonList = MoonNames(Earth);

         if (EarthBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
        
       public void MarsFiller() {
            Planet Mars = MarsGet();
         ArrayList<String> MoonList = MoonNames(Mars);

         if (MarsBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
         
       public void JupiterFiller() {
            Planet Jupiter = JupiterGet();
         ArrayList<String> MoonList = MoonNames(Jupiter);

         if (JupiterBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
          
       public void SaturnFiller() {
            Planet Saturn = SaturnGet();
         ArrayList<String> MoonList = MoonNames(Saturn);

         if (SaturnBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
            
       public void UranusFiller() {
            Planet Uranus = UranusGet();
         ArrayList<String> MoonList = MoonNames(Uranus);

         if (UranusBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }
          
       public void NeptuneFiller() {
            Planet Neptune = NeptuneGet();
         ArrayList<String> MoonList = MoonNames(Neptune);

         if (NeptuneBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         } 
          
       public void PlutoFiller() {
            Planet Pluto = PlutoGet();
         ArrayList<String> MoonList = MoonNames(Pluto);

         if (PlutoBTN.isSelected()){
            SateliteBOX.clearSelection();
         
            DefaultListModel listModel = new DefaultListModel();
         for (int i = 0; i < MoonList.size(); i++)
         {
         listModel.addElement(MoonList.get(i));
         }
         SateliteBOX.setModel(listModel); }  
         }  
       
       
       public int SatBOXRtrn (){
           int Sat;
           Sat =  SateliteBOX.getSelectedIndex();
           return Sat;      
       }
       
       
       
       public Sattelites SatelittesRtrn(Planet InputP, int SatIndex){
           ArrayList<Sattelites> SatArray = InputP.getSattelites();
           Sattelites SatRtrn = SatArray.get(SatIndex);
           return SatRtrn;
       }
       
       public boolean SatDestination(){
           boolean chk = !SateliteBOX.isSelectionEmpty();
           return chk;
       }
       
       public String TwoWayTravelTime(String Time){
           
           String[] splited = Time.split("\\s+");
           String units = splited[1];
           Double Time2 = 0.0;
           Time2 = Double.parseDouble(splited[0]);
           double Timef = Time2 * 2;
           String TimeS = String.valueOf(Timef);
           String ReturnS = (TimeS + " " + units);
           return ReturnS;
           
       }
       
       public String CostFormatter(Double input){
        String FormatedCost = new DecimalFormat("#,###.00").format(input);
        return FormatedCost;
       }
       
       
       
       

             
       

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalculateBTN;
    private javax.swing.JCheckBox ChkBoxLEO;
    private javax.swing.JComboBox<String> ComboBoxDestinationOptions;
    private javax.swing.JComboBox<String> ComboBoxTripOptions;
    private javax.swing.JRadioButton EarthBTN;
    private javax.swing.JRadioButton JupiterBTN;
    private javax.swing.JRadioButton MarsBTN;
    private javax.swing.JRadioButton MercuryBTN;
    private javax.swing.JRadioButton NeptuneBTN;
    private javax.swing.JTextArea OutputTXTBOX;
    private javax.swing.JRadioButton PlutoBTN;
    public javax.swing.JList<String> SateliteBOX;
    private javax.swing.JRadioButton SaturnBTN;
    private javax.swing.JRadioButton UranusBTN;
    private javax.swing.JRadioButton VenusBTN;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
